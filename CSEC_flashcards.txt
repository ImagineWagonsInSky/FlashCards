{
    "Name the 6 security principles": "The classic CIA: Confidentiality, Integrity, Availability. The three extra AAA: Assurance, Authenticity, Anonymity.",
    "What is the confidentiality property?": "It is the property where access is only given to authorised entities. Eavesdropping and phishing are attacks on confidentiality.",
    "What is the integrity property?": "It is the property that ensures data is untampared and uncorrupted. Alteration is an attack on integrity.",
    "What is the availability property?": "It is the property that ensures both data and the system that is to be accessed are there when needed. DoS is an attack on availability.",
    "What is the assurance property?": "It is the property that ensures the system is secure. Repudiation is an attack on assurance.",
    "What is the authenticity property?": "It is the ability to determine that statements, policies, and permissions issued by persons or systems are genuine. Masquerading (e.g. phishing or spoofing) is an attack on authenticity.",
    "What is the anonymity property?": "It is the property that ensures certain records or transactions are not to be attributable to any individual. Correlation and traceback are attacks on anonymity. Phishing is one as well.",
    "What are the 5 possible network attacks?": "Block (DoS), Wiretapping (sniffing), Wiretapping (passive), Tampering (active) and Creation (spoofing).",
    "What is the ARP?": "The Address Resolution Protocol (ARP) connects the network layer (IP addresses) to the data link layer (MAC addresses). It is based on broadcast messages and local caching. It does not support Confidentiality, Integrity or Authentication. ARP messaging broadcast: IP 'A' tell IP 'B', and machines respond: machine with IP 'A' has MAC 'A' and machine B will cache the response.",
    "Explain ARP cache Poisoning (ARP Spoofing)": "It is an attack that involves a mitm between two computers attempting standard ARP connections. Since ARP announcements are not authenticated and machines trust each other, a rogue machine can spoof other machines. So a machine can \"poison\" the ARP cache with gratuitous replies, making the machines believe they are talking to one another while the attacker is receiving and forwarding all communications.",
    "What are the 4 IP vulnerabilities and the reason why they are possible?": "Wiretapping (sniffing) since there is no encryption, Creation (spoofing) since there is no source authentication, Tampering (active) sinces there is no integrity checking and Block (DoS) since machines have limits and there are no bandwidth constraints.",
    "How are TCP connections made?": "Through a three-way handshake. The server is a passive listener. The client requests a connection by sending a SYN packet, the server responds by sending SYN/ACK packet to acknowledge the connection, and the client responds by sending ACK to the server, establishing connection.",
    "Explain SYN flooding and its limitations.": "Alice sends many SYN packets, without acknowledging any replies. Bob accumulates more SYN packets than he can handle (running out of space in state table). The issue is that it is easy to track down Alice since she uses her own IP and that she uses her own bandwidth which is likely smaller than the server's, so it is ineffective against large targets.",
    "Explain Smurfing and why it is a good alternative to SYN flooding.": "Smurfing is an attack that exploits ICMP (Internet Control Message Protocol) ping request whereby remote hosts respond to echo packets to say they are online. Some networks respond to pings to broadcast addresses. These networks are \"Smurf amplifiers\". The idea is to ping a LAN on  with the spoofed IP of the target, then all hosts on theLAN will reply to the sender, potentially causing a DDoS.",
    "What are the three Firewall types?": "Stateless Firewalls (treat each packet in isolation), Stateful Firewalls (maintains records of connections to check for legitimacy) and Application Layer Firewalls (prythat blocks certain app requests).",
    "What is the NAT?": "The Network Address Tranlation (NAT) maps internal IPs to its own IP. So sone public IP address for multiple devices in the private network, providing more address space and a layer of security.",
    "What are the 5 security design principles? Extra 4?": "(POLED) Privilege separation, Open design, Least Privilege, Economy of mechanism, Defence-in-depth. Extra is FUCD: Fail-safe defaults, Usable security, Complete mediation, Distribution of trust.",
    "What are some buffer overrun opportunities?": "Usage of unsafe libc functions that don't check bounds of buffers they manipulate, arithmetic overflows, format strings, as well as some extra ones like exception handlers, function pointers and double free.",
    "What are some unsafe libc functions?": "strcpy(), strcat(), gets() and scanf()",
    "Explain the format strings exploit": "Format strings control format functions. The format function retrieves the parameters requested by the format string from the stack. If the attacker was able to provide the format string to a format function, they could view the stack memory at any location or write to any memory location.",
    "What are the 3 main memory safety defences?": "Using memory-safe languages, applying memory safe programming practices (bound check and input validation) and code hardening (stack canaries, DEP/Write XOR Execute (W^X) and Address Space Layout Randomisation (ASLR)).",
    "What are memory-safe languages? Give examples.": "Languages whose compilers automaticall check buffer bounds and prevent memory safety vulnerabilities. Their access to memory is well-defined, checks on array bounds and pointer dereferences are automatically included by the compiler and garbage collection automatically manages memory. Some examples include Java, Python, Rust and Go.",
    "What are 3 safe programming practices?": "Bound checks, input validation and safe C libraries (strlcpy instead of strcpy)",
    "Explain stack canaries": "Stack canaries detect a stack buffer overflow before malicious code can be executed. The idea is that a random value is chosen at each execution which to overwrite the return pointer, it must be overwritten as well since it is placed before it, this value is checked before returning to ensure it has not changed. The attacker could bypass this if they learn the value, jump over it or guess it.",
    "Explain the Data Execution Protection (DEP)/Write XOR Execute (W^X) and its limitations.": "The goal is to prevent malicious code from being executed (like shell injection). The idea is to make regions in memory executable XOR writable, so the stack and heap will be writable but not executable and the text segment will be executable and not writable. The attacker could bypass this with return-to-libc attacks which don't need code injection and make used of useful calls like exec() to execute the program passed as an argument. They can provide /bin/sh, which will open a BASH shell for the attacker allowing free access to the system.",
    "Explain ASLR": "Address Space Layout Randomisation (ASLR) has the goal to prevent the attacker from predicting where things are in memory. The idea is to place standard libraries (like exec() and system()) at random locations in memory for each process.",
        "Briefly explain HTML": "The main body of a webpage is encoded using Hypertext Markup Language (HTML). It provides the structural description of a document using special tags. HTML includes FORMS to allow users to provide input to a website in the form of variables represented by name-value pairs. Forms can submit data either using the GET (encoded in URL) or the POST method (encoded in body).",
    "Briefly explain dynamic content": "It allows pages to change after their delivery to the client browser. Scripting languages like JavaScript were introduced for this. To indicate to a browser that Javascript is being used, we use <script> tags.",
    "Explain the DOM": "The Document Object Model (DOM) is a means to represent and access the content of a page. Scripts can alter/manipulate the content of a webpage by accessing/updating the DOM of the page.",
    "How is state managed in HTTP sessions?": "Since HTTP is stateless and the client has to access various pages while keeping the client state, we insert a token into the page when requested and get it passed back with the next request. There are two approaches: hidden fields and cookies.",
    "Explain hidden fields": "It is a way to keep the client state in a webpage. The idea is to include an HTML form with a hidden field containing a session ID in all the HTML pages sent to the client. This hidden field will be returned back to the server in the request This is quite tedious since all pages have to be dynamically generated to include this hidden field. What is an advantage is that all browsers support HTML forms.",
    "Explain Cookies": "It is a way to keep the client state in a webpage, among other things. It is a small piece of information that a server sends to a browser and is stored inside the browser. The idea is to include it in all subsequent requests to the originating host of the cookie. They are only sent back by the browser to their originating host and not to any other hosts (specified by domain and path).",
    "Briefly explain Frames": "Frames embed an \"inner\" webpage within an \"outer\" webpage. <iframe src=\"URL\"></iframe>.",
    "What are the mechanisms used to control access to web resources?": "subjects (Javascript scripts), objects (DOM tree data, HTTP cookies and Javascript namespace) and Access Control Mechanisms (SOP and Cookie Policy).",
    "Explain the SOP": "The Same-Origin Policy (SOP) restricts how a document or script loaded from one origin can interact with a resource from another origin. Origins are defined by the protocol, host and port of a URL and are kept in isolation.",
    "Explain the Cookie Policy": "The Cookie Policy restricts how web servers can access cookies stored in the browser. The browser automatically sends cookies back to the server if the URL's domain and path are within the cookie's scope.",
    "What are the 3 cookie security attribute.": "HTTPOnly (prevents client-side scripts from accessing the cookie, mitigates XSS), Secure (ensures transmission over HTTPS, protecting from eavesdropping) and SameSite (restricts situations in which the browser will send the cookie along with requests, prevents CSRF).",
    "SOP vs Cookie Policy": "For Javascript, the browser applies cookie policy and not SOP when determining access to cookies. Meaning that Javascript code from a given origin can access all cookies within the scope of that origin, even if those cookies were set by a different subdomain.",
    "Explain XSS attacks and its types.": "Cross-site scripting attacks (XSS) are a type of injection in which malicious scripts (usually Javascript) are injected into benign and trusted websites. The goal is to slip code into the browser under the guise of conforming to the SOP. There are two types: stored XSS (injected script permanently in target server) and reflected XSS (injected script is reflected off the web server like in an error message or a search result that includes part of the request, typically delivered to victim through email or other website, the key is find a 'good' web server that will echo the user input back in the HTML response).",
    "What are some XSS defences?": "Escape/filter output (escape dynamic data before inserting it into HTML), input validation (whitelist expected inputs), Content Security Policy (CSP, the server supplies a whitelist of the scripts that are allowed to appear on the page) and HTTPOnly attribute (scripting languages cannot access or manipulate the cookie).",
    "Explain CSRF": "Cross-Site Request Forgery (CSRF) is a type of web security vulnerability that forces a user to execute unwanted actions on a web application in which they are currently authenticated. It targets state-changing requests (like making purchases or changing passwords) rather than data theft (since attacker cannot see response). The target is a user who has an account on a vulnerable web application. The idea is to build an exploit URL or have the user visit a website with the exploit code that will send the malicious request to the vulnerable server without their knowledge or consent. The attacker needs a way for the victim to click the link (phishing emails, links on social media, compromised websites), have a way to have the victim visit the attacker's server while logged in to vulnerable server and for requests to the vulnerable server to have a predictable structure.",
    "What are some CSRF defences?": "Checking the Referer header (specifies the URL where HTTP request originated, though it can reveal browsing history), CSRF Tokens (unique and unpredictable token stored in a hidden field alongside the user's session token, on each request it would be verified to see that it matches the one stored in the user's sesision) and SameSite attribute (restricts cookie's scope).",
    "What are injection attacks? Name 2 types.": "When untrusted data is passed to an interpreter as part of a command or query. There is command injection (scenarios where data is passed to a system shell) and sql injection (scenarios where websites interact with databases).",
    "Explain how to defend against command injection": "Using input escaping. For instance, the PHP function escapeshellarg() can be used to add single quotes around a string and escape any existing single quotes.",
    "Explain how to defend against SQL injection": "Sanitising input before using it on database queries (built-in ufnctions can be used for this purpose) and using prepared statements (separates the SQL query from the data being inserted)."
}